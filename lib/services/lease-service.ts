export interface LeaseAgreement {
  id: string
  tenantId: string
  tenantName: string
  unitId: string
  unitNumber: string
  status: "draft" | "sent_for_signature" | "partially_signed" | "fully_signed" | "active" | "terminated" | "expired"
  leaseType: "fixed_term" | "month_to_month" | "periodic"
  startDate: string
  endDate: string
  rentAmount: number
  depositAmount: number
  lateFeeAmount: number
  gracePeriodDays: number
  terms: {
    petPolicy: "allowed" | "not_allowed" | "with_deposit"
    petDeposit?: number
    smokingAllowed: boolean
    maxOccupants: number
    utilitiesIncluded: string[]
    maintenanceResponsibility: "tenant" | "landlord" | "shared"
    parkingIncluded: boolean
    parkingSpaces?: number
  }
  signatures: {
    tenant: {
      signed: boolean
      signedAt?: string
      ipAddress?: string
      signatureImage?: string
    }
    landlord: {
      signed: boolean
      signedAt?: string
      ipAddress?: string
      signatureImage?: string
    }
    witness?: {
      name: string
      signed: boolean
      signedAt?: string
      signatureImage?: string
    }
  }
  documents: {
    leaseDocument: string
    addendums?: string[]
    inspectionReport?: string
    keyHandoverForm?: string
  }
  autoRenewal: {
    enabled: boolean
    noticePeriodDays: number
    renewalType: "fixed_term" | "month_to_month"
    rentIncrease?: {
      type: "percentage" | "fixed_amount"
      value: number
    }
  }
  notifications: {
    renewalReminderSent: boolean
    expirationNoticeSent: boolean
    terminationNoticeSent: boolean
  }
  createdAt: string
  updatedAt: string
  createdBy: string
}

export interface LeaseTemplate {
  id: string
  name: string
  description: string
  isDefault: boolean
  templateType: "standard" | "premium" | "student" | "commercial"
  content: string
  variables: Array<{
    key: string
    label: string
    type: "text" | "number" | "date" | "boolean"
    required: boolean
    defaultValue?: any
  }>
  clauses: Array<{
    id: string
    title: string
    content: string
    required: boolean
    editable: boolean
  }>
  createdAt: string
  updatedAt: string
}

export interface LeaseRenewal {
  id: string
  leaseId: string
  currentLeaseId: string
  status: "pending" | "tenant_accepted" | "tenant_declined" | "completed" | "expired"
  proposedStartDate: string
  proposedEndDate: string
  proposedRentAmount: number
  rentIncrease: number
  rentIncreasePercentage: number
  proposalSentAt: string
  responseDeadline: string
  tenantResponse?: "accept" | "decline" | "negotiate"
  tenantResponseAt?: string
  negotiationNotes?: string
  autoGenerated: boolean
  createdAt: string
  updatedAt: string
}

let leaseAgreements: LeaseAgreement[] = [
  {
    id: "LEASE_001",
    tenantId: "0712345678",
    tenantName: "John Doe",
    unitId: "unit_1a",
    unitNumber: "1A",
    status: "active",
    leaseType: "fixed_term",
    startDate: "2024-01-01",
    endDate: "2024-12-31",
    rentAmount: 50000,
    depositAmount: 50000,
    lateFeeAmount: 2500,
    gracePeriodDays: 5,
    terms: {
      petPolicy: "not_allowed",
      smokingAllowed: false,
      maxOccupants: 2,
      utilitiesIncluded: ["water", "garbage"],
      maintenanceResponsibility: "landlord",
      parkingIncluded: true,
      parkingSpaces: 1
    },
    signatures: {
      tenant: {
        signed: true,
        signedAt: "2023-12-20T10:00:00Z",
        ipAddress: "192.168.1.100"
      },
      landlord: {
        signed: true,
        signedAt: "2023-12-21T14:30:00Z",
        ipAddress: "192.168.1.200"
      }
    },
    documents: {
      leaseDocument: "/leases/LEASE_001.pdf",
      inspectionReport: "/inspections/unit_1a_move_in.pdf",
      keyHandoverForm: "/forms/keys_1a_handover.pdf"
    },
    autoRenewal: {
      enabled: true,
      noticePeriodDays: 60,
      renewalType: "fixed_term",
      rentIncrease: {
        type: "percentage",
        value: 5
      }
    },
    notifications: {
      renewalReminderSent: false,
      expirationNoticeSent: false,
      terminationNoticeSent: false
    },
    createdAt: "2023-12-15T09:00:00Z",
    updatedAt: "2024-01-01T12:00:00Z",
    createdBy: "admin"
  },
  {
    id: "LEASE_002", 
    tenantId: "0723456789",
    tenantName: "Jane Smith",
    unitId: "unit_2b",
    unitNumber: "2B",
    status: "sent_for_signature",
    leaseType: "fixed_term",
    startDate: "2024-02-01",
    endDate: "2025-01-31",
    rentAmount: 48000,
    depositAmount: 48000,
    lateFeeAmount: 2400,
    gracePeriodDays: 5,
    terms: {
      petPolicy: "allowed",
      petDeposit: 15000,
      smokingAllowed: false,
      maxOccupants: 1,
      utilitiesIncluded: ["water"],
      maintenanceResponsibility: "landlord",
      parkingIncluded: false
    },
    signatures: {
      tenant: {
        signed: false
      },
      landlord: {
        signed: true,
        signedAt: "2024-01-15T16:00:00Z",
        ipAddress: "192.168.1.200"
      }
    },
    documents: {
      leaseDocument: "/leases/LEASE_002.pdf"
    },
    autoRenewal: {
      enabled: false,
      noticePeriodDays: 30,
      renewalType: "month_to_month"
    },
    notifications: {
      renewalReminderSent: false,
      expirationNoticeSent: false,
      terminationNoticeSent: false
    },
    createdAt: "2024-01-10T11:00:00Z",
    updatedAt: "2024-01-15T16:00:00Z",
    createdBy: "admin"
  }
]

let leaseTemplates: LeaseTemplate[] = [
  {
    id: "TEMPLATE_001",
    name: "Standard Residential Lease",
    description: "Standard fixed-term residential lease agreement for apartments",
    isDefault: true,
    templateType: "standard",
    content: "RESIDENTIAL LEASE AGREEMENT\n\nThis lease agreement is entered into between {{landlordName}} (Landlord) and {{tenantName}} (Tenant) for the rental of Unit {{unitNumber}} located at {{propertyAddress}}.\n\nTerm: {{startDate}} to {{endDate}}\nRent: KES {{rentAmount}} per month\nDeposit: KES {{depositAmount}}\n\nTerms and Conditions:\n1. Rent is due on the 1st of each month\n2. Late fees of KES {{lateFeeAmount}} apply after {{gracePeriodDays}} days\n3. Maximum occupants: {{maxOccupants}}\n4. Pet policy: {{petPolicy}}\n5. Smoking: {{smokingPolicy}}\n\n[Additional clauses and terms...]",
    variables: [
      { key: "landlordName", label: "Landlord Name", type: "text", required: true, defaultValue: "Sunset Apartments Management" },
      { key: "tenantName", label: "Tenant Name", type: "text", required: true },
      { key: "unitNumber", label: "Unit Number", type: "text", required: true },
      { key: "propertyAddress", label: "Property Address", type: "text", required: true, defaultValue: "123 Sunset Avenue, Nairobi" },
      { key: "startDate", label: "Start Date", type: "date", required: true },
      { key: "endDate", label: "End Date", type: "date", required: true },
      { key: "rentAmount", label: "Monthly Rent", type: "number", required: true },
      { key: "depositAmount", label: "Security Deposit", type: "number", required: true },
      { key: "lateFeeAmount", label: "Late Fee Amount", type: "number", required: true, defaultValue: 2500 },
      { key: "gracePeriodDays", label: "Grace Period (Days)", type: "number", required: true, defaultValue: 5 },
      { key: "maxOccupants", label: "Maximum Occupants", type: "number", required: true, defaultValue: 2 }
    ],
    clauses: [
      {
        id: "rent_payment",
        title: "Rent Payment",
        content: "Tenant agrees to pay rent in advance on the first day of each month. Rent payments may be made via M-Pesa to Paybill 174379, Account Number: {{unitNumber}}.",
        required: true,
        editable: true
      },
      {
        id: "maintenance",
        title: "Maintenance and Repairs",
        content: "Landlord is responsible for major repairs and structural maintenance. Tenant is responsible for minor repairs and keeping the premises clean.",
        required: true,
        editable: true
      },
      {
        id: "termination",
        title: "Termination",
        content: "Either party may terminate this lease with 30 days written notice. Tenant forfeits deposit if lease is broken early without cause.",
        required: true,
        editable: true
      }
    ],
    createdAt: "2023-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z"
  }
]

let leaseRenewals: LeaseRenewal[] = [
  {
    id: "RENEWAL_001",
    leaseId: "LEASE_001",
    currentLeaseId: "LEASE_001",
    status: "pending",
    proposedStartDate: "2025-01-01",
    proposedEndDate: "2025-12-31",
    proposedRentAmount: 52500,
    rentIncrease: 2500,
    rentIncreasePercentage: 5.0,
    proposalSentAt: "2024-11-01T10:00:00Z",
    responseDeadline: "2024-11-30T23:59:59Z",
    autoGenerated: true,
    createdAt: "2024-11-01T10:00:00Z",
    updatedAt: "2024-11-01T10:00:00Z"
  }
]

export async function getLeaseAgreements(
  status?: LeaseAgreement['status'],
  tenantId?: string,
  expiringWithinDays?: number
): Promise<LeaseAgreement[]> {
  await new Promise(resolve => setTimeout(resolve, 500))
  
  let filtered = [...leaseAgreements]
  
  if (status) {
    filtered = filtered.filter(lease => lease.status === status)
  }
  
  if (tenantId) {
    filtered = filtered.filter(lease => lease.tenantId === tenantId)
  }
  
  if (expiringWithinDays) {
    const cutoffDate = new Date()
    cutoffDate.setDate(cutoffDate.getDate() + expiringWithinDays)
    
    filtered = filtered.filter(lease => {
      const endDate = new Date(lease.endDate)
      return endDate <= cutoffDate && lease.status === 'active'
    })
  }
  
  return filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
}

export async function getLeaseAgreement(leaseId: string): Promise<LeaseAgreement | null> {
  await new Promise(resolve => setTimeout(resolve, 300))
  return leaseAgreements.find(lease => lease.id === leaseId) || null
}

export async function createLeaseAgreement(
  leaseData: Omit<LeaseAgreement, 'id' | 'status' | 'createdAt' | 'updatedAt' | 'signatures' | 'notifications'>
): Promise<LeaseAgreement> {
  await new Promise(resolve => setTimeout(resolve, 800))
  
  const newLease: LeaseAgreement = {
    ...leaseData,
    id: generateLeaseId(),
    status: "draft",
    signatures: {
      tenant: { signed: false },
      landlord: { signed: false }
    },
    notifications: {
      renewalReminderSent: false,
      expirationNoticeSent: false,
      terminationNoticeSent: false
    },
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
  
  leaseAgreements.push(newLease)
  return newLease
}

export async function updateLeaseAgreement(
  leaseId: string,
  updates: Partial<LeaseAgreement>
): Promise<LeaseAgreement | null> {
  await new Promise(resolve => setTimeout(resolve, 600))
  
  const leaseIndex = leaseAgreements.findIndex(lease => lease.id === leaseId)
  if (leaseIndex === -1) return null
  
  leaseAgreements[leaseIndex] = {
    ...leaseAgreements[leaseIndex],
    ...updates,
    updatedAt: new Date().toISOString()
  }
  
  return leaseAgreements[leaseIndex]
}

export async function signLease(
  leaseId: string,
  signatureType: 'tenant' | 'landlord' | 'witness',
  signatureData: {
    signatureImage?: string
    ipAddress?: string
    witnessName?: string
  }
): Promise<LeaseAgreement | null> {
  await new Promise(resolve => setTimeout(resolve, 1000))
  
  const leaseIndex = leaseAgreements.findIndex(lease => lease.id === leaseId)
  if (leaseIndex === -1) return null
  
  const lease = leaseAgreements[leaseIndex]
  const now = new Date().toISOString()
  
  if (signatureType === 'tenant') {
    lease.signatures.tenant = {
      signed: true,
      signedAt: now,
      ipAddress: signatureData.ipAddress,
      signatureImage: signatureData.signatureImage
    }
  } else if (signatureType === 'landlord') {
    lease.signatures.landlord = {
      signed: true,
      signedAt: now,
      ipAddress: signatureData.ipAddress,
      signatureImage: signatureData.signatureImage
    }
  } else if (signatureType === 'witness' && signatureData.witnessName) {
    lease.signatures.witness = {
      name: signatureData.witnessName,
      signed: true,
      signedAt: now,
      signatureImage: signatureData.signatureImage
    }
  }
  
  const tenantSigned = lease.signatures.tenant.signed
  const landlordSigned = lease.signatures.landlord.signed
  
  if (tenantSigned && landlordSigned) {
    lease.status = "fully_signed"
  } else if (tenantSigned || landlordSigned) {
    lease.status = "partially_signed"
  }
  
  lease.updatedAt = now
  leaseAgreements[leaseIndex] = lease
  
  return lease
}

export async function sendLeaseForSignature(leaseId: string): Promise<LeaseAgreement | null> {
  await new Promise(resolve => setTimeout(resolve, 800))
  
  const lease = await updateLeaseAgreement(leaseId, { 
    status: "sent_for_signature"
  })
  
  if (lease) {
    await sendLeaseNotification(lease, "signature_request")
  }
  
  return lease
}

export async function activateLease(leaseId: string): Promise<LeaseAgreement | null> {
  await new Promise(resolve => setTimeout(resolve, 500))
  
  const lease = leaseAgreements.find(l => l.id === leaseId)
  if (!lease || lease.status !== "fully_signed") return null
  
  return await updateLeaseAgreement(leaseId, { status: "active" })
}

export async function terminateLease(
  leaseId: string,
  terminationDate: string,
  reason: string
): Promise<LeaseAgreement | null> {
  await new Promise(resolve => setTimeout(resolve, 600))
  
  const lease = await updateLeaseAgreement(leaseId, { 
    status: "terminated",
    endDate: terminationDate
  })
  
  if (lease) {
    await sendLeaseNotification(lease, "termination_notice")
  }
  
  return lease
}

export async function getLeaseTemplates(): Promise<LeaseTemplate[]> {
  await new Promise(resolve => setTimeout(resolve, 400))
  return leaseTemplates.sort((a, b) => a.isDefault ? -1 : 1)
}

export async function getLeaseTemplate(templateId: string): Promise<LeaseTemplate | null> {
  await new Promise(resolve => setTimeout(resolve, 300))
  return leaseTemplates.find(template => template.id === templateId) || null
}

export async function generateLeaseFromTemplate(
  templateId: string,
  variables: Record<string, any>
): Promise<string> {
  await new Promise(resolve => setTimeout(resolve, 1000))
  
  const template = await getLeaseTemplate(templateId)
  if (!template) throw new Error("Template not found")
  
  let leaseContent = template.content
  
  Object.entries(variables).forEach(([key, value]) => {
    const placeholder = `{{${key}}}`
    leaseContent = leaseContent.replace(new RegExp(placeholder, 'g'), value)
  })
  
  return leaseContent
}

export async function getLeaseRenewals(leaseId?: string): Promise<LeaseRenewal[]> {
  await new Promise(resolve => setTimeout(resolve, 400))
  
  if (leaseId) {
    return leaseRenewals.filter(renewal => renewal.leaseId === leaseId)
  }
  
  return leaseRenewals.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
}

export async function createLeaseRenewal(
  leaseId: string,
  renewalData: {
    proposedStartDate: string
    proposedEndDate: string
    proposedRentAmount: number
    responseDeadline: string
  }
): Promise<LeaseRenewal> {
  await new Promise(resolve => setTimeout(resolve, 700))
  
  const originalLease = await getLeaseAgreement(leaseId)
  if (!originalLease) throw new Error("Original lease not found")
  
  const rentIncrease = renewalData.proposedRentAmount - originalLease.rentAmount
  const rentIncreasePercentage = (rentIncrease / originalLease.rentAmount) * 100
  
  const newRenewal: LeaseRenewal = {
    id: generateRenewalId(),
    leaseId,
    currentLeaseId: leaseId,
    status: "pending",
    ...renewalData,
    rentIncrease,
    rentIncreasePercentage,
    proposalSentAt: new Date().toISOString(),
    autoGenerated: false,
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString()
  }
  
  leaseRenewals.push(newRenewal)
  
  await sendRenewalNotification(originalLease, newRenewal)
  
  return newRenewal
}

export async function respondToRenewal(
  renewalId: string,
  response: "accept" | "decline" | "negotiate",
  negotiationNotes?: string
): Promise<LeaseRenewal | null> {
  await new Promise(resolve => setTimeout(resolve, 500))
  
  const renewalIndex = leaseRenewals.findIndex(r => r.id === renewalId)
  if (renewalIndex === -1) return null
  
  const renewal = leaseRenewals[renewalIndex]
  renewal.tenantResponse = response
  renewal.tenantResponseAt = new Date().toISOString()
  renewal.negotiationNotes = negotiationNotes
  renewal.updatedAt = new Date().toISOString()
  
  if (response === "accept") {
    renewal.status = "tenant_accepted"
  } else if (response === "decline") {
    renewal.status = "tenant_declined"
  }
  
  leaseRenewals[renewalIndex] = renewal
  
  return renewal
}

export async function checkExpiringLeases(days: number = 60): Promise<LeaseAgreement[]> {
  await new Promise(resolve => setTimeout(resolve, 600))
  
  const cutoffDate = new Date()
  cutoffDate.setDate(cutoffDate.getDate() + days)
  
  return leaseAgreements.filter(lease => {
    const endDate = new Date(lease.endDate)
    return endDate <= cutoffDate && lease.status === 'active'
  })
}

export async function getLeaseStatistics(): Promise<{
  totalActive: number
  expiringIn30Days: number
  expiringIn60Days: number
  pendingSignatures: number
  renewalsPending: number
  avgLeaseLength: number
  occupancyRate: number
}> {
  await new Promise(resolve => setTimeout(resolve, 500))
  
  const activeLeases = leaseAgreements.filter(l => l.status === 'active')
  const expiringIn30 = await getLeaseAgreements(undefined, undefined, 30)
  const expiringIn60 = await getLeaseAgreements(undefined, undefined, 60)
  const pendingSignatures = leaseAgreements.filter(l => l.status === 'sent_for_signature' || l.status === 'partially_signed')
  const renewalsPending = leaseRenewals.filter(r => r.status === 'pending')
  
  const leaseLengths = activeLeases.map(lease => {
    const start = new Date(lease.startDate)
    const end = new Date(lease.endDate)
    return (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)
  })
  
  const avgLeaseLength = leaseLengths.length > 0 ? leaseLengths.reduce((a, b) => a + b, 0) / leaseLengths.length : 0
  
  return {
    totalActive: activeLeases.length,
    expiringIn30Days: expiringIn30.length,
    expiringIn60Days: expiringIn60.length,
    pendingSignatures: pendingSignatures.length,
    renewalsPending: renewalsPending.length,
    avgLeaseLength: Math.round(avgLeaseLength),
    occupancyRate: 92
  }
}

async function sendLeaseNotification(lease: LeaseAgreement, type: "signature_request" | "termination_notice"): Promise<void> {
  const { sendSMS } = await import("./sms-service")
  
  let message: string
  
  if (type === "signature_request") {
    message = `LEASE SIGNATURE REQUIRED\nUnit: ${lease.unitNumber}\nPlease review and sign your lease agreement.\nDeadline: 5 days\n\nSunset Apartments`
  } else {
    message = `LEASE TERMINATION NOTICE\nUnit: ${lease.unitNumber}\nYour lease will be terminated as requested.\nEnd Date: ${lease.endDate}\n\nSunset Apartments`
  }
  
  await sendSMS(lease.tenantId, message, "lease")
}

async function sendRenewalNotification(lease: LeaseAgreement, renewal: LeaseRenewal): Promise<void> {
  const { sendSMS } = await import("./sms-service")
  
  const message = `LEASE RENEWAL PROPOSAL\nUnit: ${lease.unitNumber}\nNew Rent: KES ${renewal.proposedRentAmount}\nIncrease: ${renewal.rentIncreasePercentage.toFixed(1)}%\nResponse needed by: ${new Date(renewal.responseDeadline).toLocaleDateString()}\n\nSunset Apartments`
  
  await sendSMS(lease.tenantId, message, "lease")
}

function generateLeaseId(): string {
  return `LEASE_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`
}

function generateRenewalId(): string {
  return `RENEWAL_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`
}